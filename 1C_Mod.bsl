
#Область ОписаниеПеремен

перем ОписаниеКолонок;
перем ОписаниеСтрок;

#КонецОбласти

#Область ОбработчикФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	НастроитьПредставление();	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = "Представление";
	КонецЕсли;
	
	ЗаполнитьПредставлениеВТаблице();
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикКоманд

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	РезультатЗагрузки.Очистить();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
	ПрочитатьФайлИЗаполнитьЗначениеФайла(ПутьКФайлу, ОписаниеОшибки);
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ШаблонОшибки = СтрШаблон("Возникла ошибка при загрузке данных: %1", ОписаниеОшибки);
		Сообщить(ШаблонОшибки);
		Возврат;
	КонецЕсли;
	
	Если НЕ УспешныйФорматДанных() Тогда
		Сообщить("Формат данных файла не соотвествует описанию", СтатусСообщения.ОченьВажное);
		Возврат;	
	КонецЕсли;
	
	ЗагрузитьКолонки();
	ЗагрузитьСтроки();
	
	НастроитьТаблицуПослеЗагрузки();

КонецПроцедуры

#КонецОбласти

#Область РаботаСФайлом 

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	заголовокДиалога = "Выберите файл JSON для загрузки";
	фильтрДиалога = "json(*.json)|*.json";
	
	диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	
	диалог.Заголовок = заголовокДиалога;
	диалог.Фильтр = фильтрДиалога;
	
	Если диалог.Выбрать() Тогда
		ПутьКФайлу = диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ЗагрузкаДанных

&НаКлиенте
Процедура ПрочитатьФайлИЗаполнитьЗначениеФайла(ПутьКФайлу, ОписаниеОшибки)
	
	Попытка
		
		Текст = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
		Строка = Текст.Прочитать();
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Строка);
		
		ЗначениеФайла = ПрочитатьJSON(ЧтениеJSON);
		
		ЧтениеJSON.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
    
КонецПроцедуры

&НаСервере
Функция УспешныйФорматДанных()

	Если ЗначениеФайла = Неопределено Тогда
		Возврат Ложь;			
	КонецЕсли;
	
	Если ТИПЗнч(ЗначениеФайла) <> Тип("Структура") Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеФайла.Свойство(ПолеОписаниеКолонок) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТИПЗнч(ЗначениеФайла[ПолеОписаниеКолонок]) <> Тип("Массив") Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если ЗначениеФайла[ПолеОписаниеКолонок].Количество() <> 2 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	ОписаниеКолонок = ЗначениеФайла[ПолеОписаниеКолонок][0];
	Если ОписаниеКолонок.Количество() = 0 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	ОписаниеСтрок = ЗначениеФайла[ПолеОписаниеКолонок][1]; 
	Если ОписаниеСтрок.Количество() = 0 Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Для каждого описаниеСтроки Из ОписаниеСтрок Цикл
		
		Если описаниеСтроки.Количество() <> ОписаниеКолонок.Количество() Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина; 
	
КонецФункции

&НаСервере
Процедура ЗагрузитьКолонки()
	
	КС = Новый КвалификаторыСтроки(20);
	ИсходноеОписаниеТипа = Новый Массив;
	ИсходноеОписаниеТипа.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(ИсходноеОписаниеТипа, , КС);
	
	ОписаниеКолонок = ЗначениеФайла[ПолеОписаниеКолонок][0];

	ТЗОписаниеКолонок = Новый ТаблицаЗначений;
	ТЗОписаниеКолонок.Колонки.Добавить("Представление", ОписаниеТиповСтрока, "Представление");
	НомерКолонки = 1;
	
	Для Каждого описание Из ОписаниеКолонок Цикл
		ТЗОписаниеКолонок.Колонки.Добавить(("К"+ НомерКолонки), ОписаниеТиповСтрока, описание);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	ЗаполнитьКолонкиТаблицыФормыПоТЗ(ТЗОписаниеКолонок, "РезультатЗагрузки");

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьКолонкиТаблицыФормыПоТЗ(ВходящяяТаблицаЗначений, НазваниеТаблицыФормы)
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
 	Для каждого подчиненныйЭлемент Из Элементы[НазваниеТаблицыФормы].ПодчиненныеЭлементы Цикл
		УдаляемыеРеквизиты.Добавить(подчиненныйЭлемент.ПутьКДанным);
		УдаляемыеЭлементы.Добавить(подчиненныйЭлемент);
	КонецЦикла; 
	
	Для каждого подчиненныйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(подчиненныйЭлемент);
	КонецЦикла; 
	
	НовыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из ВходящяяТаблицаЗначений.Колонки Цикл
		НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, НазваниеТаблицыФормы, Колонка.Заголовок);
	   	НовыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;

	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);
	
    Для Каждого Колонка Из ВходящяяТаблицаЗначений.Колонки Цикл
        НовыйЭлемент = Элементы.Добавить(НазваниеТаблицыФормы + "_" + Колонка.Имя, Тип("ПолеФормы"), Элементы[НазваниеТаблицыФормы]);
        НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи; 
        НовыйЭлемент.ПутьКДанным = НазваниеТаблицыФормы + "." + Колонка.Имя;
    КонецЦикла;
 
	ЭтаФорма[НазваниеТаблицыФормы].Загрузить(ВходящяяТаблицаЗначений); 
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьСтроки()
	
	ОписаниеСтрок = ЗначениеФайла[ПолеОписаниеКолонок][1];
	
	ПредставлениеЗагрузка = ?(ПустаяСтрока(Представление), "Представление", Представление);
	
	Для каждого описаниеСтроки Из ОписаниеСтрок Цикл
		
		нСтрока = РезультатЗагрузки.Добавить();
		нСтрока["Представление"] = ПредставлениеЗагрузка + ": " + описаниеСтроки[0]; 
		инд = 0;
		
		Пока инд < описаниеСтроки.Количество() Цикл
			
			номерКолонки = инд + 1; 
			нСтрока[("К" + номерКолонки)] = описаниеСтроки[инд]; 
			
			инд = инд + 1; 
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры


#КонецОбласти

#Область Служебные

&НаКлиенте
Процедура НастроитьТаблицуПослеЗагрузки()
	
	Если РезультатЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РезультатЗагрузки.ПодчиненныеЭлементы["РезультатЗагрузки_Представление"].Видимость = ВыводитьПредставление;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПредставлениеПриИзменении(Элемент)
	
	НастроитьТаблицуПослеЗагрузки();
	НастроитьПредставление();
	
КонецПроцедуры 

&НаКлиенте
Процедура НастроитьПредставление()
	
	Если ВыводитьПредставление Тогда
		Элементы.Представление.Видимость = Истина;
	Иначе
		Элементы.Представление.Видимость = Ложь;
		Представление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеВТаблице()
	
	Для Каждого строкаРезультат Из РезультатЗагрузки Цикл
		строкаРезультат["Представление"] = Представление + ": " + строкаРезультат["К1"];	
	КонецЦикла;
	
	
КонецПроцедуры


#КонецОбласти


